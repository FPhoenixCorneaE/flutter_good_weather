import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:image_gallery_saver/image_gallery_saver.dart';

import 'dio_client.dart';
import 'dio_config.dart';
import 'http_exception.dart';
import 'http_response.dart';
import 'transformer/default_http_transformer.dart';
import 'transformer/http_transformer.dart';

/// ÈááÁî® Restful Ê†áÂáÜÔºåÂàõÂª∫ÂØπÂ∫îÁöÑËØ∑Ê±ÇÊñπÊ≥ï
class HttpClient {
  late final DioClient _dio;

  /// Âçï‰æãÂØπË±°Ôºå‰∏∫‰∫ÜÈÅøÂÖçÂ§öÊ¨°ÂàõÂª∫ÂÆû‰æã
  static HttpClient? _instance;

  /// ÂÜÖÈÉ®ÊûÑÈÄ†ÊñπÊ≥ïÔºåÂèØÈÅøÂÖçÂ§ñÈÉ®Êö¥Èú≤ÊûÑÈÄ†ÂáΩÊï∞ÔºåËøõË°åÂÆû‰æãÂåñ
  HttpClient._internal({BaseOptions? options, DioConfig? dioConfig})
      : _dio = DioClient(options: options, dioConfig: dioConfig);

  static HttpClient getInstance({String? baseUrl, BaseOptions? options, DioConfig? dioConfig}) {
    _instance ??= HttpClient._internal(options: options, dioConfig: dioConfig);
    return _instance!;
  }

  HttpClient resetBaseUrl(String? baseUrl) {
    if (baseUrl != null) {
      _dio.options.baseUrl = baseUrl;
    }
    return this;
  }

  /// get
  Future<HttpResponse> get(String uri,
      {Map<String, dynamic>? queryParameters,
      bool isShowLoading = true,
      Options? options,
      CancelToken? cancelToken,
      ProgressCallback? onReceiveProgress,
      HttpTransformer? httpTransformer}) async {
    try {
      if (isShowLoading) {
        showLoading();
      }
      var response = await _dio.get(
        uri,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
        onReceiveProgress: onReceiveProgress,
      );
      return handleResponse(response, httpTransformer: httpTransformer);
    } on Exception catch (e) {
      return handleException(e);
    } finally {
      dismissLoading();
    }
  }

  /// post
  Future<HttpResponse> post(String uri,
      {dynamic data,
      Map<String, dynamic>? queryParameters,
      bool isShowLoading = true,
      Options? options,
      CancelToken? cancelToken,
      ProgressCallback? onSendProgress,
      ProgressCallback? onReceiveProgress,
      HttpTransformer? httpTransformer}) async {
    try {
      if (isShowLoading) {
        showLoading();
      }
      var response = await _dio.post(
        uri,
        data: data,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
        onSendProgress: onSendProgress,
        onReceiveProgress: onReceiveProgress,
      );
      return handleResponse(response, httpTransformer: httpTransformer);
    } on Exception catch (e) {
      return handleException(e);
    } finally {
      dismissLoading();
    }
  }

  /// patch
  Future<HttpResponse> patch(String uri,
      {dynamic data,
      Map<String, dynamic>? queryParameters,
      bool isShowLoading = true,
      Options? options,
      CancelToken? cancelToken,
      ProgressCallback? onSendProgress,
      ProgressCallback? onReceiveProgress,
      HttpTransformer? httpTransformer}) async {
    try {
      if (isShowLoading) {
        showLoading();
      }
      var response = await _dio.patch(
        uri,
        data: data,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
        onSendProgress: onSendProgress,
        onReceiveProgress: onReceiveProgress,
      );
      return handleResponse(response, httpTransformer: httpTransformer);
    } on Exception catch (e) {
      return handleException(e);
    } finally {
      dismissLoading();
    }
  }

  /// delete
  Future<HttpResponse> delete(String uri,
      {dynamic data,
      Map<String, dynamic>? queryParameters,
      bool isShowLoading = true,
      Options? options,
      CancelToken? cancelToken,
      HttpTransformer? httpTransformer}) async {
    try {
      if (isShowLoading) {
        showLoading();
      }
      var response = await _dio.delete(
        uri,
        data: data,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
      );
      return handleResponse(response, httpTransformer: httpTransformer);
    } on Exception catch (e) {
      return handleException(e);
    } finally {
      dismissLoading();
    }
  }

  /// put
  Future<HttpResponse> put(String uri,
      {dynamic data,
      Map<String, dynamic>? queryParameters,
      bool isShowLoading = true,
      Options? options,
      CancelToken? cancelToken,
      HttpTransformer? httpTransformer}) async {
    try {
      if (isShowLoading) {
        showLoading();
      }
      var response = await _dio.put(
        uri,
        data: data,
        queryParameters: queryParameters,
        options: options,
        cancelToken: cancelToken,
      );
      return handleResponse(response, httpTransformer: httpTransformer);
    } on Exception catch (e) {
      return handleException(e);
    } finally {
      dismissLoading();
    }
  }

  /// download
  /// [isImage] true‰∏∫ÂõæÁâáÔºåfalse‰∏∫Êñá‰ª∂
  Future<Map<Object?, Object?>?> download(String url, String savePath,
      {bool isImage = true,
      Map<String, dynamic>? queryParameters,
      Options? options,
      CancelToken? cancelToken,
      Object? data,
      ProgressCallback? onReceiveProgress,
      bool isReturnPathOfIOS = false}) async {
    try {
      var response = await _dio.get(
        url,
        queryParameters: queryParameters,
        data: data,
        options: options ??
            Options(
                responseType: ResponseType.bytes,
                followRedirects: false,
                validateStatus: (status) {
                  return status != null && status < 500;
                }),
        cancelToken: cancelToken,
        onReceiveProgress: onReceiveProgress,
      );
      final dynamic result;
      if (isImage) {
        result = await ImageGallerySaver.saveImage(Uint8List.fromList(response.data), quality: 100);
      } else {
        result = await ImageGallerySaver.saveFile(savePath);
      }
      return result;
    } on DioException catch (e) {
      if (CancelToken.isCancel(e)) {
        EasyLoading.showToast("‰∏ãËΩΩÂ∑≤ÂèñÊ∂àÔºÅ");
      } else {
        EasyLoading.showError(e.message ?? "");
      }
      return null;
    } on Exception catch (e) {
      if (kDebugMode) {
        print(e);
      }
      return null;
    }
  }
}

void showLoading() {
  EasyLoading.instance
    ..displayDuration = const Duration(milliseconds: 2000)
    // More indicatorType can see in üëâ flutter_spinkit showcase: https://github.com/jogboms/flutter_spinkit#-showcase
    ..indicatorType = EasyLoadingIndicatorType.fadingCircle
    ..loadingStyle = EasyLoadingStyle.custom
    ..indicatorSize = 60.w
    ..radius = 20.w
    ..progressColor = Colors.white
    ..backgroundColor = Colors.black.withOpacity(0.5)
    ..indicatorColor = Colors.blue
    ..textColor = Colors.white
    ..textStyle = TextStyle(color: Colors.white, fontSize: 20.sp)
    ..maskColor = Colors.black.withOpacity(0.5)
    ..userInteractions = true
    ..dismissOnTap = false;
  EasyLoading.show(status: "Âä†ËΩΩ‰∏≠...");
}

void dismissLoading() {
  EasyLoading.dismiss();
}

HttpResponse handleResponse(Response? response, {HttpTransformer? httpTransformer}) {
  httpTransformer ??= DefaultHttpTransformer.getInstance();

  // ËøîÂõûÂÄºÂºÇÂ∏∏
  if (response == null) {
    return HttpResponse.failureFromError();
  }

  // tokenÂ§±Êïà
  if (_isTokenTimeout(response.statusCode)) {
    return HttpResponse.failureFromError(UnauthorisedException(message: "Ê≤°ÊúâÊùÉÈôê", code: response.statusCode));
  }
  // Êé•Âè£Ë∞ÉÁî®ÊàêÂäü
  if (_isRequestSuccess(response.statusCode)) {
    return httpTransformer.parse(response);
  } else {
    // Êé•Âè£Ë∞ÉÁî®Â§±Ë¥•
    return HttpResponse.failure(errorMsg: response.statusMessage, errorCode: response.statusCode);
  }
}

HttpResponse handleException(Exception exception) {
  var parseException = _parseException(exception);
  return HttpResponse.failureFromError(parseException);
}

/// Èâ¥ÊùÉÂ§±Ë¥•
bool _isTokenTimeout(int? code) {
  return code == 401;
}

/// ËØ∑Ê±ÇÊàêÂäü
bool _isRequestSuccess(int? statusCode) {
  return (statusCode != null && statusCode == 200);
}

/// Ëá™ÂÆö‰πâÈîôËØØÁä∂ÊÄÅÁ†Å
/// ÂíåÈ£éÂ§©Ê∞îÊé•Âè£ËøîÂõûÁöÑÈîôËØØÁä∂ÊÄÅÁ†ÅÂ§ÑÁêÜ
HttpException _parseException(Exception error) {
  if (error is DioException) {
    switch (error.type) {
      case DioExceptionType.connectionTimeout:
      case DioExceptionType.receiveTimeout:
      case DioExceptionType.sendTimeout:
      case DioExceptionType.connectionError:
        return NetworkException(message: error.message);
      case DioExceptionType.cancel:
        return CancelException(error.message);
      case DioExceptionType.badCertificate:
      case DioExceptionType.badResponse:
        try {
          int? errCode = error.response?.statusCode;
          switch (errCode) {
            case 204:
              return BadRequestException(message: "ËØ∑Ê±ÇÊàêÂäüÔºå‰ΩÜ‰Ω†Êü•ËØ¢ÁöÑÂú∞Âå∫ÊöÇÊó∂Ê≤°Êúâ‰Ω†ÈúÄË¶ÅÁöÑÊï∞ÊçÆ„ÄÇ", code: errCode);
            case 400:
              return BadRequestException(message: "ËØ∑Ê±ÇÈîôËØØÔºåÂèØËÉΩÂåÖÂê´ÈîôËØØÁöÑËØ∑Ê±ÇÂèÇÊï∞ÊàñÁº∫Â∞ëÂøÖÈÄâÁöÑËØ∑Ê±ÇÂèÇÊï∞„ÄÇ", code: errCode);
            case 401:
              return UnauthorisedException(
                  message: "ËÆ§ËØÅÂ§±Ë¥•ÔºåÂèØËÉΩ‰ΩøÁî®‰∫ÜÈîôËØØÁöÑKEY„ÄÅÊï∞Â≠óÁ≠æÂêçÈîôËØØ„ÄÅKEYÁöÑÁ±ªÂûãÈîôËØØÔºàÂ¶Ç‰ΩøÁî®SDKÁöÑKEYÂéªËÆøÈóÆWeb APIÔºâ„ÄÇ", code: errCode);
            case 402:
              return UnauthorisedException(message: "Ë∂ÖËøáËÆøÈóÆÊ¨°Êï∞Êàñ‰ΩôÈ¢ù‰∏çË∂≥‰ª•ÊîØÊåÅÁªßÁª≠ËÆøÈóÆÊúçÂä°Ôºå‰Ω†ÂèØ‰ª•ÂÖÖÂÄº„ÄÅÂçáÁ∫ßËÆøÈóÆÈáèÊàñÁ≠âÂæÖËÆøÈóÆÈáèÈáçÁΩÆ„ÄÇ", code: errCode);
            case 403:
              return BadRequestException(
                  message: "Êó†ËÆøÈóÆÊùÉÈôêÔºåÂèØËÉΩÊòØÁªëÂÆöÁöÑPackageName„ÄÅBundleID„ÄÅÂüüÂêçIPÂú∞ÂùÄ‰∏ç‰∏ÄËá¥ÔºåÊàñËÄÖÊòØÈúÄË¶ÅÈ¢ùÂ§ñ‰ªòË¥πÁöÑÊï∞ÊçÆ„ÄÇ", code: errCode);
            case 404:
              return BadRequestException(message: "Êü•ËØ¢ÁöÑÊï∞ÊçÆÊàñÂú∞Âå∫‰∏çÂ≠òÂú®„ÄÇ", code: errCode);
            case 429:
              return BadRequestException(message: "Ë∂ÖËøáÈôêÂÆöÁöÑQPMÔºàÊØèÂàÜÈíüËÆøÈóÆÊ¨°Êï∞ÔºâÔºåËØ∑ÂèÇËÄÉQPMËØ¥Êòé", code: errCode);
            case 500:
              return BadServiceException(message: "Êó†ÂìçÂ∫îÊàñË∂ÖÊó∂ÔºåÊé•Âè£ÊúçÂä°ÂºÇÂ∏∏ËØ∑ËÅîÁ≥ªÊàë‰ª¨", code: errCode);
            default:
              return UnknownException(error.message);
          }
        } on Exception catch (_) {
          return UnknownException(error.message);
        }

      case DioExceptionType.unknown:
        if (error.error is SocketException) {
          return NetworkException(message: error.message);
        } else {
          return UnknownException(error.message);
        }
      default:
        return UnknownException(error.message);
    }
  } else {
    return UnknownException(error.toString());
  }
}
